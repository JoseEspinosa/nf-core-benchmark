/*
========================================================================================
    Nextflow config file for running minimal tests
========================================================================================
    Defines input files and everything required to run a fast and simple pipeline test
    included in nf-core-benchmark

    Use as follows:
        nextflow run nf-core/benchmark -profile test_nfb,<docker/singularity>
----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Test viralrecon within nf-core benchmark profile'
    config_profile_description = 'Minimal test dataset to check pipeline function under nf-core benchmark'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = 6.GB
    max_time   = 6.h

    // Input data
    // TODO nf-core: Specify the paths to your test data on nf-core/test-datasets
    // TODO nf-core: Give any required params for the test so that command line flags are not needed
    pipeline       = 'viralrecon'
    skip_benchmark = true
    benchmark_work = "${projectDir}/tmp"
    pipeline_test_config = "/Users/jaespinosa/git/nf-core-benchmark/pipelines/viralrecon/conf/test.config"
}

// println "${params.pipeline_path} ==================\n ======================\n ======================"

// Include tests from the included pipeline
//
try {
    includeConfig "${params.pipeline_test_config}"
    // Do I need a benchmarker test config file? #TODO
} catch (Exception e) {
    System.err.println("ERROR: The selected pipeline \"${params.pipeline}\" needs a test configuration for nf-benchmark ${params.pipeline_test_config}")
}

// includeConfig "${params.pipeline_path}/nextflow.config"
includeConfig  "/Users/jaespinosa/git/nf-core-benchmark/pipelines/viralrecon/nextflow.config"
includeConfig  "/Users/jaespinosa/git/nf-core-benchmark/pipelines/viralrecon/conf/test.config"

// Set the library of the included pipeline
// libDir = "${projectDir}/lib:${projectDir}/pipelines/${params.pipeline}/lib"

def get_pipeline_lib (pipelines_lib_dir, benchmarker_lib_dir='benchmarker') {

        def dirs = ["${projectDir}/lib"]
        def dir = new File(pipelines_lib_dir)

        dir.eachDirRecurse () { file ->
            if (file.toString() =~ /$pipelines_lib_dir\/.*\/lib/) {
                dirs << file.toString()
            }
            if (file.toString() =~ /$benchmarker_lib_dir\/.*\/lib/) {
                dirs << file.toString()
            }
        }
        String libs = dirs.join(':')

        return libs
}

libDir = get_pipeline_lib("${params.pipelines_dir}")
println "........................... ${libDir}"

System.exit(1)

