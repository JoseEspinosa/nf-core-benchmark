/*
========================================================================================
    Nextflow config file for running minimal tests
========================================================================================
    Defines input files and everything required to run a fast and simple pipeline test
    included in nf-core-benchmark

    Use as follows:
        nextflow run nf-core/benchmark -profile test_nfb,<docker/singularity>
----------------------------------------------------------------------------------------
*/

params {
    config_profile_name        = 'Test a pipeline within nf-core benchmark profile'
    config_profile_description = 'Minimal test dataset to check pipeline function under nf-core benchmark'

    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = 6.GB
    max_time   = 6.h

    // Input data
    // TODO nf-core: Specify the paths to your test data on nf-core/test-datasets
    // TODO nf-core: Give any required params for the test so that command line flags are not needed
    pipeline               = 'viralrecon'
    pipeline_workflow_name = 'NFCORE_VIRALRECON' //Set when the pipeline and the workflow call is not the same
    skip_benchmark         = true
    benchmark_work         = "${projectDir}/tmp"
    pipeline_path          = "${projectDir}/pipelines/viralrecon"
    pipeline_main_config   = "${params.pipeline_path}/nextflow.config"
    pipeline_test_config   = "${params.pipeline_path}/conf/test.config"
    skip_emit              = true
}

// Tests from the included pipeline
// nf-core-benchmark inherits the test configuration of the pipeline
// Do I need a benchmarker test config file? #TODO
// includeConfig  "${projectDir}/pipelines/viralrecon/nextflow.config"
// includeConfig  "${projectDir}/pipelines/viralrecon/conf/test.config"
// includeConfig "${params.pipeline_path}/nextflow.config"
// includeConfig "${params.pipeline_path}/viralrecon/conf/test.config"
try {
    includeConfig "${params.pipeline_main_config}"
} catch (Exception e) {
    System.err.println("ERROR: The config file of the selected pipeline \"${params.pipeline_main_config}\" can not be correctly included")
}
try {
    includeConfig "${params.pipeline_test_config}"
} catch (Exception e) {
    System.err.println("ERROR: The selected pipeline \"${params.pipeline}\" needs a test configuration for nf-benchmark ${params.pipeline_test_config}")
}

// Function to get libraries of the included workflows
def get_pipeline_lib (pipelines_lib_dir, benchmarker_lib_dir='benchmarker') {

        def dirs = ["${projectDir}/lib"]
        def dir = new File(pipelines_lib_dir)

        dir.eachDirRecurse () { file ->
            if (file.toString() =~ /$pipelines_lib_dir\/.*\/lib/) {
                dirs << file.toString()
            }
            if (file.toString() =~ /$benchmarker_lib_dir\/.*\/lib/) {
                dirs << file.toString()
            }
        }
        String libs = dirs.join(':')

        return libs
}

// Set libraries for groovy files from included pipelines using a function
libDir = get_pipeline_lib("${params.pipelines_dir}")

// Set the library of the included pipeline with an implicit declaration
// libDir = "${projectDir}/lib:${projectDir}/pipelines/${params.pipeline}/lib"


